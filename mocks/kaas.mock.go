// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/RTradeLtd/grpc/krab"
	"google.golang.org/grpc"
)

type FakeServiceClient struct {
	DeletePrivateKeyStub        func(context.Context, *krab.KeyDelete, ...grpc.CallOption) (*krab.Response, error)
	deletePrivateKeyMutex       sync.RWMutex
	deletePrivateKeyArgsForCall []struct {
		arg1 context.Context
		arg2 *krab.KeyDelete
		arg3 []grpc.CallOption
	}
	deletePrivateKeyReturns struct {
		result1 *krab.Response
		result2 error
	}
	deletePrivateKeyReturnsOnCall map[int]struct {
		result1 *krab.Response
		result2 error
	}
	GetPrivateKeyStub        func(context.Context, *krab.KeyGet, ...grpc.CallOption) (*krab.Response, error)
	getPrivateKeyMutex       sync.RWMutex
	getPrivateKeyArgsForCall []struct {
		arg1 context.Context
		arg2 *krab.KeyGet
		arg3 []grpc.CallOption
	}
	getPrivateKeyReturns struct {
		result1 *krab.Response
		result2 error
	}
	getPrivateKeyReturnsOnCall map[int]struct {
		result1 *krab.Response
		result2 error
	}
	PutPrivateKeyStub        func(context.Context, *krab.KeyPut, ...grpc.CallOption) (*krab.Response, error)
	putPrivateKeyMutex       sync.RWMutex
	putPrivateKeyArgsForCall []struct {
		arg1 context.Context
		arg2 *krab.KeyPut
		arg3 []grpc.CallOption
	}
	putPrivateKeyReturns struct {
		result1 *krab.Response
		result2 error
	}
	putPrivateKeyReturnsOnCall map[int]struct {
		result1 *krab.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceClient) DeletePrivateKey(arg1 context.Context, arg2 *krab.KeyDelete, arg3 ...grpc.CallOption) (*krab.Response, error) {
	fake.deletePrivateKeyMutex.Lock()
	ret, specificReturn := fake.deletePrivateKeyReturnsOnCall[len(fake.deletePrivateKeyArgsForCall)]
	fake.deletePrivateKeyArgsForCall = append(fake.deletePrivateKeyArgsForCall, struct {
		arg1 context.Context
		arg2 *krab.KeyDelete
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeletePrivateKey", []interface{}{arg1, arg2, arg3})
	fake.deletePrivateKeyMutex.Unlock()
	if fake.DeletePrivateKeyStub != nil {
		return fake.DeletePrivateKeyStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePrivateKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceClient) DeletePrivateKeyCallCount() int {
	fake.deletePrivateKeyMutex.RLock()
	defer fake.deletePrivateKeyMutex.RUnlock()
	return len(fake.deletePrivateKeyArgsForCall)
}

func (fake *FakeServiceClient) DeletePrivateKeyCalls(stub func(context.Context, *krab.KeyDelete, ...grpc.CallOption) (*krab.Response, error)) {
	fake.deletePrivateKeyMutex.Lock()
	defer fake.deletePrivateKeyMutex.Unlock()
	fake.DeletePrivateKeyStub = stub
}

func (fake *FakeServiceClient) DeletePrivateKeyArgsForCall(i int) (context.Context, *krab.KeyDelete, []grpc.CallOption) {
	fake.deletePrivateKeyMutex.RLock()
	defer fake.deletePrivateKeyMutex.RUnlock()
	argsForCall := fake.deletePrivateKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceClient) DeletePrivateKeyReturns(result1 *krab.Response, result2 error) {
	fake.deletePrivateKeyMutex.Lock()
	defer fake.deletePrivateKeyMutex.Unlock()
	fake.DeletePrivateKeyStub = nil
	fake.deletePrivateKeyReturns = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) DeletePrivateKeyReturnsOnCall(i int, result1 *krab.Response, result2 error) {
	fake.deletePrivateKeyMutex.Lock()
	defer fake.deletePrivateKeyMutex.Unlock()
	fake.DeletePrivateKeyStub = nil
	if fake.deletePrivateKeyReturnsOnCall == nil {
		fake.deletePrivateKeyReturnsOnCall = make(map[int]struct {
			result1 *krab.Response
			result2 error
		})
	}
	fake.deletePrivateKeyReturnsOnCall[i] = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) GetPrivateKey(arg1 context.Context, arg2 *krab.KeyGet, arg3 ...grpc.CallOption) (*krab.Response, error) {
	fake.getPrivateKeyMutex.Lock()
	ret, specificReturn := fake.getPrivateKeyReturnsOnCall[len(fake.getPrivateKeyArgsForCall)]
	fake.getPrivateKeyArgsForCall = append(fake.getPrivateKeyArgsForCall, struct {
		arg1 context.Context
		arg2 *krab.KeyGet
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPrivateKey", []interface{}{arg1, arg2, arg3})
	fake.getPrivateKeyMutex.Unlock()
	if fake.GetPrivateKeyStub != nil {
		return fake.GetPrivateKeyStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPrivateKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceClient) GetPrivateKeyCallCount() int {
	fake.getPrivateKeyMutex.RLock()
	defer fake.getPrivateKeyMutex.RUnlock()
	return len(fake.getPrivateKeyArgsForCall)
}

func (fake *FakeServiceClient) GetPrivateKeyCalls(stub func(context.Context, *krab.KeyGet, ...grpc.CallOption) (*krab.Response, error)) {
	fake.getPrivateKeyMutex.Lock()
	defer fake.getPrivateKeyMutex.Unlock()
	fake.GetPrivateKeyStub = stub
}

func (fake *FakeServiceClient) GetPrivateKeyArgsForCall(i int) (context.Context, *krab.KeyGet, []grpc.CallOption) {
	fake.getPrivateKeyMutex.RLock()
	defer fake.getPrivateKeyMutex.RUnlock()
	argsForCall := fake.getPrivateKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceClient) GetPrivateKeyReturns(result1 *krab.Response, result2 error) {
	fake.getPrivateKeyMutex.Lock()
	defer fake.getPrivateKeyMutex.Unlock()
	fake.GetPrivateKeyStub = nil
	fake.getPrivateKeyReturns = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) GetPrivateKeyReturnsOnCall(i int, result1 *krab.Response, result2 error) {
	fake.getPrivateKeyMutex.Lock()
	defer fake.getPrivateKeyMutex.Unlock()
	fake.GetPrivateKeyStub = nil
	if fake.getPrivateKeyReturnsOnCall == nil {
		fake.getPrivateKeyReturnsOnCall = make(map[int]struct {
			result1 *krab.Response
			result2 error
		})
	}
	fake.getPrivateKeyReturnsOnCall[i] = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) PutPrivateKey(arg1 context.Context, arg2 *krab.KeyPut, arg3 ...grpc.CallOption) (*krab.Response, error) {
	fake.putPrivateKeyMutex.Lock()
	ret, specificReturn := fake.putPrivateKeyReturnsOnCall[len(fake.putPrivateKeyArgsForCall)]
	fake.putPrivateKeyArgsForCall = append(fake.putPrivateKeyArgsForCall, struct {
		arg1 context.Context
		arg2 *krab.KeyPut
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutPrivateKey", []interface{}{arg1, arg2, arg3})
	fake.putPrivateKeyMutex.Unlock()
	if fake.PutPrivateKeyStub != nil {
		return fake.PutPrivateKeyStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putPrivateKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceClient) PutPrivateKeyCallCount() int {
	fake.putPrivateKeyMutex.RLock()
	defer fake.putPrivateKeyMutex.RUnlock()
	return len(fake.putPrivateKeyArgsForCall)
}

func (fake *FakeServiceClient) PutPrivateKeyCalls(stub func(context.Context, *krab.KeyPut, ...grpc.CallOption) (*krab.Response, error)) {
	fake.putPrivateKeyMutex.Lock()
	defer fake.putPrivateKeyMutex.Unlock()
	fake.PutPrivateKeyStub = stub
}

func (fake *FakeServiceClient) PutPrivateKeyArgsForCall(i int) (context.Context, *krab.KeyPut, []grpc.CallOption) {
	fake.putPrivateKeyMutex.RLock()
	defer fake.putPrivateKeyMutex.RUnlock()
	argsForCall := fake.putPrivateKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceClient) PutPrivateKeyReturns(result1 *krab.Response, result2 error) {
	fake.putPrivateKeyMutex.Lock()
	defer fake.putPrivateKeyMutex.Unlock()
	fake.PutPrivateKeyStub = nil
	fake.putPrivateKeyReturns = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) PutPrivateKeyReturnsOnCall(i int, result1 *krab.Response, result2 error) {
	fake.putPrivateKeyMutex.Lock()
	defer fake.putPrivateKeyMutex.Unlock()
	fake.PutPrivateKeyStub = nil
	if fake.putPrivateKeyReturnsOnCall == nil {
		fake.putPrivateKeyReturnsOnCall = make(map[int]struct {
			result1 *krab.Response
			result2 error
		})
	}
	fake.putPrivateKeyReturnsOnCall[i] = struct {
		result1 *krab.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deletePrivateKeyMutex.RLock()
	defer fake.deletePrivateKeyMutex.RUnlock()
	fake.getPrivateKeyMutex.RLock()
	defer fake.getPrivateKeyMutex.RUnlock()
	fake.putPrivateKeyMutex.RLock()
	defer fake.putPrivateKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ krab.ServiceClient = new(FakeServiceClient)
