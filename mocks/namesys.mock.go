// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/ipfs/go-ipfs/namesys"
	path "github.com/ipfs/go-path"
	nsopts "github.com/ipfs/interface-go-ipfs-core/options/namesys"
	"github.com/libp2p/go-libp2p-core/crypto"
)

type FakeNameSystem struct {
	PublishStub        func(context.Context, crypto.PrivKey, path.Path) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 context.Context
		arg2 crypto.PrivKey
		arg3 path.Path
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	PublishWithEOLStub        func(context.Context, crypto.PrivKey, path.Path, time.Time) error
	publishWithEOLMutex       sync.RWMutex
	publishWithEOLArgsForCall []struct {
		arg1 context.Context
		arg2 crypto.PrivKey
		arg3 path.Path
		arg4 time.Time
	}
	publishWithEOLReturns struct {
		result1 error
	}
	publishWithEOLReturnsOnCall map[int]struct {
		result1 error
	}
	ResolveStub        func(context.Context, string, ...nsopts.ResolveOpt) (path.Path, error)
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []nsopts.ResolveOpt
	}
	resolveReturns struct {
		result1 path.Path
		result2 error
	}
	resolveReturnsOnCall map[int]struct {
		result1 path.Path
		result2 error
	}
	ResolveAsyncStub        func(context.Context, string, ...nsopts.ResolveOpt) <-chan namesys.Result
	resolveAsyncMutex       sync.RWMutex
	resolveAsyncArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []nsopts.ResolveOpt
	}
	resolveAsyncReturns struct {
		result1 <-chan namesys.Result
	}
	resolveAsyncReturnsOnCall map[int]struct {
		result1 <-chan namesys.Result
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNameSystem) Publish(arg1 context.Context, arg2 crypto.PrivKey, arg3 path.Path) error {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 context.Context
		arg2 crypto.PrivKey
		arg3 path.Path
	}{arg1, arg2, arg3})
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.publishReturns
	return fakeReturns.result1
}

func (fake *FakeNameSystem) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeNameSystem) PublishCalls(stub func(context.Context, crypto.PrivKey, path.Path) error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeNameSystem) PublishArgsForCall(i int) (context.Context, crypto.PrivKey, path.Path) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNameSystem) PublishReturns(result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNameSystem) PublishReturnsOnCall(i int, result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNameSystem) PublishWithEOL(arg1 context.Context, arg2 crypto.PrivKey, arg3 path.Path, arg4 time.Time) error {
	fake.publishWithEOLMutex.Lock()
	ret, specificReturn := fake.publishWithEOLReturnsOnCall[len(fake.publishWithEOLArgsForCall)]
	fake.publishWithEOLArgsForCall = append(fake.publishWithEOLArgsForCall, struct {
		arg1 context.Context
		arg2 crypto.PrivKey
		arg3 path.Path
		arg4 time.Time
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("PublishWithEOL", []interface{}{arg1, arg2, arg3, arg4})
	fake.publishWithEOLMutex.Unlock()
	if fake.PublishWithEOLStub != nil {
		return fake.PublishWithEOLStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.publishWithEOLReturns
	return fakeReturns.result1
}

func (fake *FakeNameSystem) PublishWithEOLCallCount() int {
	fake.publishWithEOLMutex.RLock()
	defer fake.publishWithEOLMutex.RUnlock()
	return len(fake.publishWithEOLArgsForCall)
}

func (fake *FakeNameSystem) PublishWithEOLCalls(stub func(context.Context, crypto.PrivKey, path.Path, time.Time) error) {
	fake.publishWithEOLMutex.Lock()
	defer fake.publishWithEOLMutex.Unlock()
	fake.PublishWithEOLStub = stub
}

func (fake *FakeNameSystem) PublishWithEOLArgsForCall(i int) (context.Context, crypto.PrivKey, path.Path, time.Time) {
	fake.publishWithEOLMutex.RLock()
	defer fake.publishWithEOLMutex.RUnlock()
	argsForCall := fake.publishWithEOLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNameSystem) PublishWithEOLReturns(result1 error) {
	fake.publishWithEOLMutex.Lock()
	defer fake.publishWithEOLMutex.Unlock()
	fake.PublishWithEOLStub = nil
	fake.publishWithEOLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNameSystem) PublishWithEOLReturnsOnCall(i int, result1 error) {
	fake.publishWithEOLMutex.Lock()
	defer fake.publishWithEOLMutex.Unlock()
	fake.PublishWithEOLStub = nil
	if fake.publishWithEOLReturnsOnCall == nil {
		fake.publishWithEOLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishWithEOLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNameSystem) Resolve(arg1 context.Context, arg2 string, arg3 ...nsopts.ResolveOpt) (path.Path, error) {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []nsopts.ResolveOpt
	}{arg1, arg2, arg3})
	fake.recordInvocation("Resolve", []interface{}{arg1, arg2, arg3})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNameSystem) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeNameSystem) ResolveCalls(stub func(context.Context, string, ...nsopts.ResolveOpt) (path.Path, error)) {
	fake.resolveMutex.Lock()
	defer fake.resolveMutex.Unlock()
	fake.ResolveStub = stub
}

func (fake *FakeNameSystem) ResolveArgsForCall(i int) (context.Context, string, []nsopts.ResolveOpt) {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	argsForCall := fake.resolveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNameSystem) ResolveReturns(result1 path.Path, result2 error) {
	fake.resolveMutex.Lock()
	defer fake.resolveMutex.Unlock()
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 path.Path
		result2 error
	}{result1, result2}
}

func (fake *FakeNameSystem) ResolveReturnsOnCall(i int, result1 path.Path, result2 error) {
	fake.resolveMutex.Lock()
	defer fake.resolveMutex.Unlock()
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 path.Path
			result2 error
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 path.Path
		result2 error
	}{result1, result2}
}

func (fake *FakeNameSystem) ResolveAsync(arg1 context.Context, arg2 string, arg3 ...nsopts.ResolveOpt) <-chan namesys.Result {
	fake.resolveAsyncMutex.Lock()
	ret, specificReturn := fake.resolveAsyncReturnsOnCall[len(fake.resolveAsyncArgsForCall)]
	fake.resolveAsyncArgsForCall = append(fake.resolveAsyncArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []nsopts.ResolveOpt
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResolveAsync", []interface{}{arg1, arg2, arg3})
	fake.resolveAsyncMutex.Unlock()
	if fake.ResolveAsyncStub != nil {
		return fake.ResolveAsyncStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resolveAsyncReturns
	return fakeReturns.result1
}

func (fake *FakeNameSystem) ResolveAsyncCallCount() int {
	fake.resolveAsyncMutex.RLock()
	defer fake.resolveAsyncMutex.RUnlock()
	return len(fake.resolveAsyncArgsForCall)
}

func (fake *FakeNameSystem) ResolveAsyncCalls(stub func(context.Context, string, ...nsopts.ResolveOpt) <-chan namesys.Result) {
	fake.resolveAsyncMutex.Lock()
	defer fake.resolveAsyncMutex.Unlock()
	fake.ResolveAsyncStub = stub
}

func (fake *FakeNameSystem) ResolveAsyncArgsForCall(i int) (context.Context, string, []nsopts.ResolveOpt) {
	fake.resolveAsyncMutex.RLock()
	defer fake.resolveAsyncMutex.RUnlock()
	argsForCall := fake.resolveAsyncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNameSystem) ResolveAsyncReturns(result1 <-chan namesys.Result) {
	fake.resolveAsyncMutex.Lock()
	defer fake.resolveAsyncMutex.Unlock()
	fake.ResolveAsyncStub = nil
	fake.resolveAsyncReturns = struct {
		result1 <-chan namesys.Result
	}{result1}
}

func (fake *FakeNameSystem) ResolveAsyncReturnsOnCall(i int, result1 <-chan namesys.Result) {
	fake.resolveAsyncMutex.Lock()
	defer fake.resolveAsyncMutex.Unlock()
	fake.ResolveAsyncStub = nil
	if fake.resolveAsyncReturnsOnCall == nil {
		fake.resolveAsyncReturnsOnCall = make(map[int]struct {
			result1 <-chan namesys.Result
		})
	}
	fake.resolveAsyncReturnsOnCall[i] = struct {
		result1 <-chan namesys.Result
	}{result1}
}

func (fake *FakeNameSystem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.publishWithEOLMutex.RLock()
	defer fake.publishWithEOLMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	fake.resolveAsyncMutex.RLock()
	defer fake.resolveAsyncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNameSystem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ namesys.NameSystem = new(FakeNameSystem)
